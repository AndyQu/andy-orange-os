#Makefile for boot

#Entry Point for my os
#It must be the same as 'KernelEntryPointPhyAddr' in load.inc
ENTRY_POINT=0x030500

#Offset of entry point in kernel file
#It depends on Entry Point
ENTRY_OFFSET=0x400

#program,flags,etc.
ASM=nasm
DASM=ndisasm
CC=gcc
#CC=g++
LD=ld
ASM_BOOT_FLAGS=-I ./boot/include/
ASM_KERNEL_FLAGS=-I include/ -f elf32
CFLAGS=-I include -I kernel/include -c -fno-builtin -m32 -fno-stack-protector -Wno-deprecated
#-Wno-deprecated added in chapter8/a
LDFLAGS=-s -Ttext $(ENTRY_POINT) --oformat elf32-i386
DASMFLAGS=-u -o $(ENTRY_POINT) -e $(ENTRY_OFFSET)

#This program
TINIX_BOOT=boot/boot.img boot/loader.com boot/boot.com
TINIX_KERNEL=kernel/kernel.bin


#中间阶段文件
OBJS=./kernel/kernel.o ./kernel/init.o ./kernel/set_idt.o ./kernel/i8259.o ./kernel/global.o ./kernel/interrupt.o ./kernel/global_const.o ./kernel/keymap.o ./kernel/key.o ./kernel/tty.o ./lib/klib.o ./lib/klibC.o ./kernel/sys_call_shell.o ./kernel/sys_call_kernel.o ./kernel/printf.o ./kernel/myprintf.o ./kernel/ipc.o ./kernel/proc_init.o ./lib/misc.o ./kernel/tick_task.o ./kernel/tty_task.o ./kernel/normal_procs.o ./kernel/service_get_ticks.o ./kernel/tss.o ./kernel/proc_util.o


#All Phony Targets
.PHONY:everything all clean disasm build_iso build_img

#Default starting position
#everything: $(TINIX_KERNEL) $(TINIX_BOOT) build_img build_iso dasmInfo 
#modified in chapter8.a
everything: $(TINIX_KERNEL) $(TINIX_BOOT) build_img
#dasmInfo

renew:	clean everything
clean:
	rm -f $(OBJS) $(TINIX_BOOT) $(TINIX_KERNEL) $(DASM_OUTPUT) boot/boot.bin
build_img:
	mount	-o loop	boot/boot.img	/mnt/floppy
	cp -f boot/loader.com	/mnt/floppy
	cp -f $(TINIX_KERNEL) /mnt/floppy
	umount	/mnt/floppy	
build_iso:
	mkisofs -o cd.iso boot/loader.com boot/boot.com $(TINIX_KERNEL)	
dasmInfo:
	mkdir -p kernel/info/
	ndisasm -u -o $(ENTRY_POINT) -e $(ENTRY_OFFSET) $(TINIX_KERNEL) >kernel/info/kernel.bin.asm
	readelf	-a -S $(TINIX_KERNEL) >kernel/info/kernel.elf
	ndisasm -u kernel/init.o >kernel/info/init.asm


#生成目标软盘
boot/boot.img: boot/boot.bin
	dd if=/dev/zero of=emptydisk.img bs=512 count=2880 #生成空白软盘镜像文件
	dd if=boot/boot.bin of=boot/boot.img bs=512 count=1 #用 bin file 生成对应的镜像文件
	dd if=emptydisk.img of=boot/boot.img skip=1 seek=1 bs=512 count=2879 #在 bin 生成的镜像文件后补上空白，最后成为合适大小的软盘镜像
	rm -rf emptydisk.img
	sudo chmod 666 boot/boot.img

boot/boot.bin:./boot/boot.asm ./boot/include/load.inc ./boot/include/fat12hdr.inc
	$(ASM) $(ASM_BOOT_FLAGS) -o $@ $<
boot/loader.com:boot/loader.asm boot/include/load.inc boot/include/fat12hdr.inc boot/include/pm.inc boot/include/lib.inc
	$(ASM) $(ASM_BOOT_FLAGS) -o $@ $<
boot/boot.com:./boot/boot.asm ./boot/include/load.inc ./boot/include/fat12hdr.inc
	$(ASM) $(ASM_BOOT_FLAGS) -D_BOOT_DEBUG_ -o $@ $<



$(TINIX_KERNEL):$(OBJS)
	$(LD) $(LDFLAGS) -o $@ $(OBJS)

./kernel/kernel.o:kernel/kernel.asm include/pm.inc
	$(ASM) $(ASM_KERNEL_FLAGS) -o $@ $<

./kernel/init.o: kernel/init.c include/type.h include/const.h include/protect_type.h \
			include/proto.h kernel/include/global.h kernel/include/global_const.h \
			include/pm.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/set_idt.o: kernel/set_idt.c include/type.h include/const.h \
			include/protect_type.h kernel/include/global.h include/keyboard_type.h \
			include/proto.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/i8259.o: kernel/i8259.c include/type.h include/const.h include/protect_type.h \
			include/proto.h include/interrupt_const.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/global.o:kernel/global.c include/type.h include/const.h \
			include/protect_type.h kernel/include/global.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/global_const.o: kernel/global_const.c include/type.h include/const.h \
			include/protect_type.h kernel/include/global.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/keymap.o: kernel/keymap.c include/const.h include/type.h \
			include/keyboard_type.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/key.o: kernel/key.c include/type.h include/const.h include/keyboard_type.h \
		include/keymap.h include/proto.h include/assert.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/tty.o: kernel/tty.c include/const.h include/type.h include/keyboard_type.h \
		include/proto.h kernel/include/key.h
	$(CC) $(CFLAGS) -o $@ $<

#sys_call.asm changed name as sys_call_shell.asm in chapter8.a
./kernel/sys_call_shell.o:	kernel/sys_call_shell.asm
	$(ASM) $(ASM_KERNEL_FLAGS) -o $@ $<

#sys_call_functions.c changed name as sys_call_kernel.c in chapter8.a
./kernel/sys_call_kernel.o: kernel/sys_call_kernel.c include/const.h \
				include/type.h include/protect_type.h kernel/include/global.h \
				include/keyboard_type.h include/ipc_func.h include/proc_func.h include/console_const.h \
				kernel/include/key.h include/proto.h include/assert.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/printf.o: kernel/printf.c include/const.h include/type.h include/proto.h \
			kernel/include/sys_call_shell.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/myprintf.o:	kernel/myprintf.asm
	$(ASM) $(ASM_KERNEL_FLAGS) -o $@ $<

#added in chapter8.a
./kernel/ipc.o: kernel/ipc.c include/const.h include/type.h include/protect_type.h \
			kernel/include/global.h include/proto.h include/proc_func.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/proc_init.o: kernel/proc_init.c include/type.h include/const.h include/protect_type.h \
			kernel/include/global.h include/pm.h kernel/include/printf.h
	$(CC) $(CFLAGS) -o $@ $<

#added in chapter8.a end

./kernel/interrupt.o:kernel/interrupt.asm
	$(ASM) $(ASM_KERNEL_FLAGS) -o $@ $<

./lib/klib.o:lib/klib.asm
	$(ASM) $(ASM_KERNEL_FLAGS) -o $@ $<

./lib/klibC.o:lib/klibC.c include/type.h include/const.h
	$(CC) $(CFLAGS) -o $@ $<


#added in chapter8/a
./lib/misc.o: lib/misc.c include/type.h include/const.h kernel/include/printf.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/tick_task.o: kernel/tick_task.c include/type.h include/const.h \
			include/protect_type.h kernel/include/global.h include/pm.h include/ipc_func.h \
			include/assert.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/tty_task.o: kernel/tty_task.c include/type.h include/const.h \
			include/protect_type.h kernel/include/global.h include/pm.h include/ipc_func.h \
			include/keyboard_type.h kernel/include/key.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/normal_procs.o: kernel/normal_procs.c include/type.h include/const.h \
		include/protect_type.h kernel/include/global.h include/pm.h \
 		kernel/include/printf.h
	$(CC) $(CFLAGS) -o $@ $<

./kernel/service_get_ticks.o: kernel/service_get_ticks.c include/type.h include/const.h \
		include/ipc_func.h
	$(CC) $(CFLAGS) -o $@ $<

#added in chapter8/a end

#added in chapter8.c
./kernel/tss.o: kernel/tss.c kernel/include/global.h kernel/include/global_const.h
	$(CC) $(CFLAGS) -o $@ $<
#added in chapter8.c end

#added in chapter9/a
./kernel/proc_util.o: kernel/proc_util.c include/const.h include/type.h \
 include/protect_type.h include/type.h include/const.h kernel/include/global.h \
 include/proto.h include/assert.h
	$(CC) $(CFLAGS) -o $@ $<
#added in chapter9/a end
